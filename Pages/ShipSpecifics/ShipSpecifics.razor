@page "/ship/{ShipId}"

<Row>
    <Card ColumnSize="ColumnSize.Is5" Margin="Margin.Is3" Padding="Padding.Is3">
        <SpaceTradersField Label="Id" Content="@ShipId"/>
        <SpaceTradersField Label="Class" Content="@Ship.Class"/>
        <SpaceTradersField Label="Max Cargo" Content="@Ship.MaxCargo.ToString()"/>
        <SpaceTradersField Label="Space Available" Content="@Ship.SpaceAvailable.ToString()"/>
    </Card>
    <Card ColumnSize="ColumnSize.Is5" Margin="Margin.Is3" Padding="Padding.Is3">
        <Select TValue="string" SelectedValueChanged="OnAvailableGoodsValue_Changed">
            @foreach (var good in _availableGoods)
            {
                <SelectItem Value="good.Symbol">@good.Name</SelectItem>
            }
        </Select>

        <Div>
            <Label>
                Buy @_selectedGood.Name
            </Label>
            <Row>
                <Column>
                    <FieldLabel>
                        Volume per Unit
                    </FieldLabel>
                    <NumericEdit TValue="int?" Value="@_selectedGood.VolumePerUnit" Disabled/>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is8">
                    <NumericEdit TValue="int?" Value="_goodValue" Disabled/>
                </Column>
                <Column Flex="Flex.JustifyContent.Center">
                    <Button Color="Color.Primary" Clicked="OnGoodBuyButton_Clicked">Buy</Button>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is8" Margin="Margin.Is1.FromTop">
                    <Slider TValue="int?" Step="@_selectedGood.VolumePerUnit" Min="@_selectedGood.VolumePerUnit" Max="@Ship.SpaceAvailable" Value="_goodValue" ValueChanged="OnGoodSliderValue_Changed"/>
                </Column>
            </Row>
        </Div>


    </Card>
</Row>
<Div>&nbsp;</Div>

<Card ColumnSize="ColumnSize.Is5">
    <DataGrid TItem="InventoryItem"
              Data="@Ship.Cargo"
              RowSelectable="_ => false">
        <DataGridColumns>
            <DataGridColumn Field="@nameof(InventoryItem.TotalVolume)" Caption="Volume"/>
            <DataGridColumn Field="@nameof(InventoryItem.Quantity)" Caption="Quantity"/>
            <DataGridColumn Field="@nameof(InventoryItem.Good)" Caption="Goods"/>
        </DataGridColumns>
    </DataGrid>
</Card>

<SpaceTradersSnackbar @ref="@_snackbar" Color="_snackbarColor" Message="@_snackbarMessage"/>

@code {

    [Parameter]
    public string? ShipId { get; set; }

    private Ship Ship { get; set; } = new();
    private List<Good> _availableGoods = new();
    private Good _selectedGood = new();

    private int? _goodValue = 0;

    private SpaceTradersSnackbar _snackbar = new();
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Ship = await AccountService.GetOwnedShip(ShipId);
        _availableGoods = await MarketService.GetAvailableGoods();
    }

    private Task OnGoodSliderValue_Changed(int? newValue)
    {
        _goodValue = newValue;
        return Task.CompletedTask;
    }

    private async Task OnGoodBuyButton_Clicked()
    {
        var order = new BuyGoodDTO {ShipId = Ship.Id, Good = "FUEL", Quantity = _goodValue};
        var result = await AccountService.BuyFuelForShip(order);

        if (!result.Succeeded)
        {
            _snackbarMessage = result.Error;
        }
        else
        {
            _snackbarColor = SnackbarColor.Success;
            _snackbarMessage = "Fuel bought!";
        }

        await _snackbar.Show();
    }

    private void OnAvailableGoodsValue_Changed(string symbol)
    {
        _selectedGood = _availableGoods.FirstOrDefault(g => g.Symbol == symbol) ?? new Good();
    }

}